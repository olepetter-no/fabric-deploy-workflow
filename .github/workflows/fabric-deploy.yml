name: Microsoft Fabric Deploy

on:
  workflow_call:
    inputs:
      fabric_workspace_id:
        description: 'Microsoft Fabric workspace ID'
        required: true
        type: string
      source_directory:
        description: 'Directory with Fabric artifacts to deploy'
        required: false
        type: string
        default: './fabric'
      environment:
        description: 'Target environment (dev|staging|prod)'
        required: true
        type: string
      dry_run:
        description: 'Perform a dry run without making changes'
        required: false
        type: boolean
        default: false
      python_version:
        description: 'Python version to use'
        required: false
        type: string
        default: '3.12'
      deploy_mode:
        description: 'Deployment mode'
        required: false
        type: string
        default: 'full'
      standardize_lakehouse_refs:
        description: 'Standardize lakehouse references before deployment'
        required: false
        type: boolean
        default: false
      update_deployment_tag:
        description: 'Create/update deployment tag for incremental tracking'
        required: false
        type: boolean
        default: true
    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_CLIENT_SECRET:
        required: true
      AZURE_TENANT_ID:
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    permissions:
      contents: write  # needed to push tags

    steps:
      - name: 📥 Checkout repository (app/artifacts)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📥 Checkout fabric-deploy workflow repo
        uses: actions/checkout@v4
        with:
          repository: olepetter-no/fabric-deploy-workflow
          path: .fabric-deploy-workflow
          ref: main

      - name: 🐍 Setup Python ${{ inputs.python_version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python_version }}

      - name: 📝 Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: 💾 Cache Poetry venv
        id: cache-venv
        uses: actions/cache@v4
        with:
          path: .fabric-deploy-workflow/.venv
          key: venv-${{ runner.os }}-${{ inputs.python_version }}-${{ hashFiles('.fabric-deploy-workflow/poetry.lock') }}

      - name: 📦 Install dependencies
        working-directory: .fabric-deploy-workflow
        run: |
          poetry install --only main --no-interaction --no-ansi

      - name: 🔍 Validate configuration
        working-directory: .fabric-deploy-workflow
        run: |
          echo "Validating configuration..."
          poetry run python -m fabric_deploy validate \
            --fabric-workspace-id "${{ inputs.fabric_workspace_id }}" \
            --source-directory "../${{ inputs.source_directory }}" \
            --environment "${{ inputs.environment }}"

      - name: ⚙️ Configure git identity (for tag pushes)
        if: ${{ !inputs.dry_run && inputs.update_deployment_tag }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: 🚀 Deploy to Microsoft Fabric
        working-directory: .fabric-deploy-workflow
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        run: |
          echo "Deploying (mode=${{ inputs.deploy_mode }}, env=${{ inputs.environment }})"
          poetry run python -m fabric_deploy deploy \
            --fabric-workspace-id "${{ inputs.fabric_workspace_id }}" \
            --source-directory "../${{ inputs.source_directory }}" \
            --environment "${{ inputs.environment }}" \
            --deploy-mode "${{ inputs.deploy_mode }}" \
            ${{ inputs.dry_run && '--dry-run' || '' }} \
            ${{ inputs.standardize_lakehouse_refs && '--standardize-lakehouse-refs' || '' }} \
            ${{ inputs.update_deployment_tag && '--update-deployment-tags' || '--no-update-deployment-tags' }}

      - name: 🏷️ Push deployment tags
        if: ${{ !inputs.dry_run && inputs.update_deployment_tag }}
        run: |
          # Push all latestDeployed/* tags (created by the CLI in the main repo)
          TAGS="$(git tag --list 'latestDeployed/*')"
          if [ -z "$TAGS" ]; then
            echo "No deployment tags to push."
            exit 0
          fi

          echo "Pushing deployment tags..."
          while IFS= read -r tag; do
            # Replace remote tag (force-update)
            git push origin ":refs/tags/$tag" >/dev/null 2>&1 || true
            git push origin "$tag"
          done <<< "$TAGS"

      - name: ✅ Summary
        if: always()
        run: |
          echo "Fabric deploy :: env=${{ inputs.environment }} mode=${{ inputs.deploy_mode }} dry_run=${{ inputs.dry_run }}"
