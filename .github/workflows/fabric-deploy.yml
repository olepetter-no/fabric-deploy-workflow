name: Microsoft Fabric Deploy

on:
  workflow_call:
    inputs:
           - name: üöÄ      - name: üì• Checkout RepositoryInitialize Deploymentfabric_workspace_id:
        description: 'Microsoft Fabric workspace ID'
        required: true
        type: string
      source_directory:
        description: 'Directory containing Fabric artifacts to deploy'
        required: false
        type: string
        default: './fabric'
      environment:
        description: 'Target environment (dev, staging, prod)'
        required: true
        type: string
      dry_run:
        description: 'Perform a dry run without making changes'
        required: false
        type: boolean
        default: false
      python_version:
        description: 'Python version to use'
        required: false
        type: string
        default: '3.12'
      deploy_mode:
        description: 'Deployment mode: full (deploy all) or incremental (deploy changes only)'
        required: false
        type: string
        default: 'full'
      standardize_lakehouse_refs:
        description: 'Standardize lakehouse references in notebooks before deployment'
        required: false
        type: boolean
        default: false
      fabric_item_types:
        description: 'Comma-separated list of Fabric item types to deploy (default: all types)'
        required: false
        type: string
        default: ''
      update_deployment_tags:
        description: 'Create and update deployment tags for incremental deployment tracking'
        required: false
        type: boolean
        default: true
    secrets:
      AZURE_CLIENT_ID:
        description: 'Azure Service Principal Client ID'
        required: true
      AZURE_CLIENT_SECRET:
        description: 'Azure Service Principal Client Secret'
        required: true
      AZURE_TENANT_ID:
        description: 'Azure Tenant ID'
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    permissions:
      contents: write  # Required to push git tags back to repository
      id-token: write

    steps:
      - name: ÔøΩ Initialize Deployment
        run: |
          echo "üöÄ Microsoft Fabric Deployment Workflow"
          echo "========================================="
          echo "Environment: ${{ inputs.environment }}"
          echo "Deploy Mode: ${{ inputs.deploy_mode }}"
          echo "Source Directory: ${{ inputs.source_directory }}"
          echo "Workspace ID: ${{ inputs.fabric_workspace_id }}"
          echo "Python Version: ${{ inputs.python_version }}"
          ${{ inputs.dry_run && 'echo "Mode: üîÑ DRY RUN (no changes will be made)"' || 'echo "Mode: ‚úÖ LIVE DEPLOYMENT"' }}
          ${{ inputs.fabric_item_types != '' && format('echo "Item Types: {0}"', inputs.fabric_item_types) || 'echo "Item Types: All supported types"' }}
          ${{ inputs.standardize_lakehouse_refs && 'echo "Lakehouse Refs: ‚úÖ Will be standardized"' || 'echo "Lakehouse Refs: ‚ûñ No standardization"' }}
          ${{ inputs.update_deployment_tags && 'echo "Deployment Tags: ‚úÖ Will be created/updated"' || 'echo "Deployment Tags: ‚ûñ Disabled"' }}
          echo "========================================="
          echo ""

      - name: ÔøΩüì• Checkout Repository
        uses: actions/checkout@v4

      - name: üì• Checkout Fabric Deploy Workflow
        uses: actions/checkout@v4
        with:
          repository: olepetter-no/fabric-deploy-workflow
          path: .fabric-deploy-workflow
          ref: main

      - name: üêç Set up Python ${{ inputs.python_version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python_version }}

      - name: üìù Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: üíæ Load Cached Dependencies
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .fabric-deploy-workflow/.venv
          key: venv-${{ runner.os }}-${{ inputs.python_version }}-${{ hashFiles('.fabric-deploy-workflow/poetry.lock') }}

      - name: üì¶ Install Dependencies
        working-directory: .fabric-deploy-workflow
        run: |
          echo "üì¶ Installing fabric-deploy dependencies..."
          poetry install --only=main
          echo "‚úÖ Dependencies installed successfully"

      - name: üìã Validate Configuration
        working-directory: .fabric-deploy-workflow
        run: |
          echo "üîç Validating deployment configuration..."
          poetry run fabric-deploy validate \
            --workspace-id "${{ inputs.fabric_workspace_id }}" \
            --source-dir "../${{ inputs.source_directory }}" \
            --environment "${{ inputs.environment }}"
          echo "‚úÖ Configuration validation completed"

      - name: üöÄ Deploy to Microsoft Fabric
        working-directory: .fabric-deploy-workflow
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        run: |
          echo "üöÄ Starting deployment to Microsoft Fabric..."
          echo "   Environment: ${{ inputs.environment }}"
          echo "   Deploy mode: ${{ inputs.deploy_mode }}"
          echo "   Workspace ID: ${{ inputs.fabric_workspace_id }}"
          echo "   Source directory: ${{ inputs.source_directory }}"
          ${{ inputs.dry_run && 'echo "   üîÑ DRY RUN MODE - No changes will be made"' || '' }}
          echo ""
          
          # Check current deployment state
          echo "üìä Checking current deployment state..."
          if [ "${{ inputs.update_deployment_tags }}" == "true" ]; then
            EXISTING_TAGS=$(git -C ../ tag --list "latestDeployed/*" | wc -l)
            if [ "$EXISTING_TAGS" -gt 0 ]; then
              echo "   Found existing deployment tags:"
              git -C ../ tag --list "latestDeployed/*" | sed 's/^/     /'
            else
              echo "   No previous deployment tags found (first deployment)"
            fi
          else
            echo "   Deployment tag tracking is disabled"
          fi
          echo ""
          
          # Prepare fabric items filter
          FABRIC_ITEMS_ARGS=""
          if [ -n "${{ inputs.fabric_item_types }}" ]; then
            echo "üéØ Filtering deployment to specific item types: ${{ inputs.fabric_item_types }}"
            IFS=',' read -ra ITEMS <<< "${{ inputs.fabric_item_types }}"
            for item in "${ITEMS[@]}"; do
              FABRIC_ITEMS_ARGS="$FABRIC_ITEMS_ARGS --fabric-items $(echo $item | xargs)"
            done
          else
            echo "üì¶ Deploying all supported Fabric item types"
          fi
          echo ""

          # Execute deployment
          echo "üîÑ Executing deployment..."
          poetry run fabric-deploy deploy \
            --workspace-id "${{ inputs.fabric_workspace_id }}" \
            --source-dir "../${{ inputs.source_directory }}" \
            --environment "${{ inputs.environment }}" \
            --deploy-mode "${{ inputs.deploy_mode }}" \
            ${{ inputs.dry_run && '--dry-run' || '' }} \
            ${{ inputs.standardize_lakehouse_refs && '--standardize-lakehouse-refs' || '' }} \
            ${{ inputs.update_deployment_tags && '--update-deployment-tags' || '--no-update-deployment-tags' }} \
            $FABRIC_ITEMS_ARGS
            
          echo ""
          echo "‚úÖ Deployment completed successfully"

      - name: üè∑Ô∏è Update Deployment Tags
        if: ${{ !inputs.dry_run && inputs.update_deployment_tags }}
        run: |
          echo "üè∑Ô∏è Updating deployment tracking tags..."
          
          # Check if any deployment tags exist locally
          DEPLOYMENT_TAGS=$(git tag --list "latestDeployed/*")
          
          if [ -n "$DEPLOYMENT_TAGS" ]; then
            echo "üì§ Pushing deployment tags to repository:"
            echo "$DEPLOYMENT_TAGS" | sed 's/^/   /'
            echo ""
            
            # Push all deployment tags
            SUCCESS_COUNT=0
            TOTAL_COUNT=$(echo "$DEPLOYMENT_TAGS" | wc -l)
            
            for tag in $DEPLOYMENT_TAGS; do
              echo "üì§ Pushing tag: $tag"
              # Delete remote tag if it exists (force update)
              git push origin ":refs/tags/$tag" 2>/dev/null || true
              # Push new tag
              if git push origin "$tag" 2>/dev/null; then
                echo "   ‚úÖ Successfully pushed: $tag"
                SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
              else
                echo "   ‚ùå Failed to push: $tag"
              fi
            done
            
            echo ""
            echo "üìä Tag push summary: $SUCCESS_COUNT/$TOTAL_COUNT tags pushed successfully"
            
            if [ "$SUCCESS_COUNT" -eq "$TOTAL_COUNT" ]; then
              echo "‚úÖ All deployment tags updated successfully"
            else
              echo "‚ö†Ô∏è Some tags failed to push - incremental deployments may not work correctly"
            fi
          else
            echo "üì≠ No deployment tags found - no tags to push"
          fi

      - name: üéâ Deployment Summary
        if: always()
        run: |
          echo ""
          echo "üéâ Microsoft Fabric Deployment Complete"
          echo "========================================"
          echo "Environment: ${{ inputs.environment }}"
          echo "Deploy Mode: ${{ inputs.deploy_mode }}"
          echo "Workspace ID: ${{ inputs.fabric_workspace_id }}"
          
          if [ "${{ job.status }}" == "success" ]; then
            echo "Status: ‚úÖ SUCCESS"
            ${{ inputs.dry_run && 'echo "Note: This was a dry run - no actual changes were made"' || 'echo "Deployment completed successfully"' }}
          else
            echo "Status: ‚ùå FAILED"
            echo "Check the logs above for error details"
          fi
          echo "========================================"
