name: 'Microsoft Fabric Deploy'
description: 'Deploy Microsoft Fabric solutions using fabric-cicd'
author: 'Ole Petter'

inputs:
  workspace_id:
    description: 'Microsoft Fabric workspace ID (GUID format)'
    required: true
  source_directory:
    description: 'Directory containing Fabric artifacts relative to repository root'
    required: false
    default: './fabric-artifacts'
  environment:
    description: 'Target environment (dev, staging, prod)'
    required: false
    default: 'dev'
  dry_run:
    description: 'Perform dry run without actual deployment (true/false)'
    required: false
    default: 'false'

outputs:
  deployment_status:
    description: 'Status of the deployment (success/failed)'
    value: ${{ steps.deploy.outputs.status }}
  error_message:
    description: 'Error message if deployment failed'
    value: ${{ steps.deploy.outputs.error }}

runs:
  using: 'composite'
  steps:
    - name: Validate inputs
      shell: bash
      run: |
        echo "� Validating deployment inputs..."

        # Validate workspace ID format (should be GUID)
        if [[ ! "${{ inputs.workspace_id }}" =~ ^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$ ]]; then
          echo "⚠️  Warning: Workspace ID doesn't appear to be in GUID format"
        fi

        # Validate environment
        if [[ ! "${{ inputs.environment }}" =~ ^(dev|staging|prod)$ ]]; then
          echo "⚠️  Warning: Non-standard environment '${{ inputs.environment }}'"
        fi

        # Check source directory exists
        if [[ ! -d "${{ github.workspace }}/${{ inputs.source_directory }}" ]]; then
          echo "❌ Error: Source directory '${{ inputs.source_directory }}' does not exist"
          exit 1
        fi

        echo "✅ Input validation completed"

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Setup Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true

    - name: Checkout fabric-deploy-workflow
      uses: actions/checkout@v4
      with:
        repository: ${{ github.action_repository || 'olepetter-no/fabric-deploy-workflow' }}
        ref: ${{ github.action_ref || 'main' }}
        path: ./.fabric-deploy-action

    - name: Install fabric-deploy dependencies
      shell: bash
      run: |
        echo "📦 Installing fabric-deploy dependencies..."
        cd ./.fabric-deploy-action
        poetry install --only=main --no-interaction
        echo "✅ Dependencies installed"

    - name: Deploy to Microsoft Fabric
      id: deploy
      shell: bash
      env:
        AZURE_CLIENT_ID: ${{ env.AZURE_CLIENT_ID }}
        AZURE_CLIENT_SECRET: ${{ env.AZURE_CLIENT_SECRET }}
        AZURE_TENANT_ID: ${{ env.AZURE_TENANT_ID }}
      run: |
        echo "🚀 Starting Microsoft Fabric deployment..."
        echo "📍 Workspace ID: ${{ inputs.workspace_id }}"
        echo "📁 Source Directory: ${{ inputs.source_directory }}"
        echo "🎯 Environment: ${{ inputs.environment }}"
        echo "🧪 Dry Run: ${{ inputs.dry_run }}"
        echo ""

        cd ./.fabric-deploy-action

        # Prepare deployment command
        DEPLOY_CMD="poetry run fabric-deploy deploy"
        DEPLOY_CMD="$DEPLOY_CMD --workspace-id \"${{ inputs.workspace_id }}\""
        DEPLOY_CMD="$DEPLOY_CMD --source-dir \"${{ github.workspace }}/${{ inputs.source_directory }}\""
        DEPLOY_CMD="$DEPLOY_CMD --environment \"${{ inputs.environment }}\""

        if [[ "${{ inputs.dry_run }}" == "true" ]]; then
          DEPLOY_CMD="$DEPLOY_CMD --dry-run"
        fi

        # Execute deployment
        echo "⚡ Executing: $DEPLOY_CMD"
        if eval $DEPLOY_CMD; then
          echo "✅ Deployment completed successfully"
          echo "status=success" >> $GITHUB_OUTPUT
        else
          echo "❌ Deployment failed"
          echo "status=failed" >> $GITHUB_OUTPUT
          echo "error=Deployment command failed" >> $GITHUB_OUTPUT
          exit 1
        fi

    - name: Cleanup
      if: always()
      shell: bash
      run: |
        echo "🧹 Cleaning up temporary files..."
        rm -rf ./.fabric-deploy-action
        echo "✅ Cleanup completed"

branding:
  icon: 'upload-cloud'
  color: 'blue'
