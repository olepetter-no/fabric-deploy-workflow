name: 'Microsoft Fabric Deploy'
description: 'Deploy Microsoft Fabric solutions using fabric-cicd'
author: 'Ole Petter'

inputs:
  workspace_id:
    description: 'Microsoft Fabric workspace ID (GUID format)'
    required: true
  source_directory:
    description: 'Directory containing Fabric artifacts relative to repository root'
    required: false
    default: './fabric-artifacts'
  environment:
    description: 'Target environment (dev, staging, prod)'
    required: false
    default: 'dev'
  dry_run:
    description: 'Perform dry run without actual deployment (true/false)'
    required: false
    default: 'false'

outputs:
  deployment_status:
    description: 'Status of the deployment (success/failed)'
    value: ${{ steps.deploy.outputs.status }}
  error_message:
    description: 'Error message if deployment failed'
    value: ${{ steps.deploy.outputs.error }}

runs:
  using: 'composite'
  steps:
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install fabric-cicd
      shell: bash
      run: |
        echo "📦 Installing fabric-cicd..."
        pip install fabric-cicd==0.1.29
        echo "✅ fabric-cicd installed successfully"
        
    - name: Deploy to Microsoft Fabric
      id: deploy
      shell: bash
      env:
        AZURE_CLIENT_ID: ${{ env.AZURE_CLIENT_ID }}
        AZURE_CLIENT_SECRET: ${{ env.AZURE_CLIENT_SECRET }}
        AZURE_TENANT_ID: ${{ env.AZURE_TENANT_ID }}
      run: |
        echo "🚀 Starting Microsoft Fabric deployment..."
        echo "📍 Workspace ID: ${{ inputs.workspace_id }}"
        echo "📁 Source Directory: ${{ inputs.source_directory }}"
        echo "🎯 Environment: ${{ inputs.environment }}"
        echo "🧪 Dry Run: ${{ inputs.dry_run }}"
        echo ""
        
        # Use fabric-cicd directly
        python -c "
        import os
        from fabric_cicd import FabricWorkspace, publish_all_items
        
        workspace_id = '${{ inputs.workspace_id }}'
        source_dir = '${{ github.workspace }}/${{ inputs.source_directory }}'
        environment = '${{ inputs.environment }}'
        dry_run = '${{ inputs.dry_run }}' == 'true'
        
        print(f'📍 Deploying from: {source_dir}')
        print(f'🎯 Target workspace: {workspace_id}')
        print(f'🌍 Environment: {environment}')
        print(f'🧪 Dry run: {dry_run}')
        
        try:
            workspace = FabricWorkspace(
                workspace_id=workspace_id,
                environment=environment,
                repository_directory=source_dir
            )
            
            if dry_run:
                print('🧪 Performing dry run validation...')
                # Add dry run logic here when available in fabric-cicd
                print('✅ Dry run validation completed')
            else:
                print('🚀 Starting deployment...')
                result = publish_all_items(workspace)
                print('✅ Deployment completed successfully')
                
            print('status=success')
        except Exception as e:
            print(f'❌ Deployment failed: {str(e)}')
            print('status=failed')
            print(f'error={str(e)}')
            exit(1)
        "
        
        echo "status=success" >> $GITHUB_OUTPUT

branding:
  icon: 'upload-cloud'
  color: 'blue'