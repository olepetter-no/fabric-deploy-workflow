name: Deploy to Fabric Stage Workspace

on:
  push:
    branches: [stage]
    paths:
      - 'fabric/**'
  workflow_dispatch:
    inputs:
      deploy_mode:
        description: 'Deployment mode'
        type: choice
        options: ['incremental', 'full']
        default: 'incremental'
      unpublish_orphan_items:
        description: 'Unpublish orphan items'
        type: boolean
        default: true
      standardize_default_lakehouse:
        description: 'Standardize default lakehouse references'
        type: boolean
        default: true
      update_deployment_tag:
        description: 'Create/update deployment tags'
        type: boolean
        default: true
      dry_run:
        description: 'Dry run'
        type: boolean
        default: false
      verbose:
        description: 'Verbose output'
        type: boolean
        default: false

concurrency:
  group: deploy-fabric-stage-${{ github.ref }}

permissions:
  contents: read

defaults:
  run:
    shell: bash -euo pipefail

jobs:
  resolve-vars:
    if: github.ref_name == 'stage'
    runs-on: ubuntu-latest
    environment: stage
    outputs:
      workspace_id: ${{ steps.set.outputs.workspace_id }}
    steps:
      - id: set
        shell: bash
        run: echo "workspace_id=${{ vars.STAGE_FABRIC_WORKSPACE_ID }}" >> "$GITHUB_OUTPUT"

  deploy:
    if: github.event_name == 'workflow_dispatch' || github.ref_name == 'stage'
    needs: resolve-vars
    permissions:
      contents: write
      id-token: write
    uses: olepetter-no/fabric-deploy-workflow/.github/workflows/fabric-deploy.yml@main
    with:
      workspace_id: ${{ needs.resolve-vars.outputs.workspace_id }}
      source_directory: './fabric'        # use a literal instead of env.SOURCE_DIR
      environment: 'stage'                # pass-through for the reusable workflow
      deploy_mode: ${{ github.event_name == 'workflow_dispatch' && inputs.deploy_mode || 'incremental' }}
      unpublish_orphan_items: ${{ github.event_name == 'workflow_dispatch' && inputs.unpublish_orphan_items || true }}
      standardize_default_lakehouse: ${{ github.event_name == 'workflow_dispatch' && inputs.standardize_default_lakehouse || true }}
      update_deployment_tag: ${{ github.event_name == 'workflow_dispatch' && inputs.update_deployment_tag || true }}
      dry_run: ${{ github.event_name == 'workflow_dispatch' && inputs.dry_run || false }}
      verbose: ${{ github.event_name == 'workflow_dispatch' && inputs.verbose || false }}
    secrets:
      AZURE_CLIENT_ID:     ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      AZURE_TENANT_ID:     ${{ secrets.AZURE_TENANT_ID }}
